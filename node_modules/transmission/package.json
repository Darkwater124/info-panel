{
  "author": {
    "name": "Tim"
  },
  "name": "transmission",
  "description": "API client for transmissionbt",
  "version": "0.3.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/FLYBYME/node-transmission.git"
  },
  "main": "lib/transmission",
  "readme": "# node-transmission\n\ntransmission-daemon wrapper script written in node.js\n\n## Install\n\n```sh\nnpm install transmission\n```\n\n## How to Use\n\n```coffee\nTransmission = require 'transmission'\ntransmission = new Transmission\n  host: 'localhost'  # default 'localhost'\n  port: 9091         # default 9091\n  username: 'hoge'   # default blank\n  password: 'fuga'   # default blank\n  url: '/my/other/url'   # default '/transmission/rpc'\n```\n\n## Definition\n\n### Status\n\nRPC returned torrent status with integer `0-7`.\n\nUsing `transmission.status` for inspect status.\n\n```\ntransmission.status =\n  STOPPED       : 0  # Torrent is stopped\n  CHECK_WAIT    : 1  # Queued to check files\n  CHECK         : 2  # Checking files\n  DOWNLOAD_WAIT : 3  # Queued to download\n  DOWNLOAD      : 4  # Downloading\n  SEED_WAIT     : 5  # Queued to seed\n  SEED          : 6  # Seeding\n  ISOLATED      : 7  # Torrent can't find peers\n```\n\n## Methods\n\n### transmission.set([ids], callback)\n\nSet torrent's properties.\n\n```coffee\ntransmission.set [1, 6], options, (err) ->\n```\nYou must provide one or more ids. According to the rpc-spec, transmission will not respond a success argument. Only error.\n\n### transmission.add(path, callback)\n\nAdd torrents to transmission-daemon.\n\n```coffee\ntransmission.add 'path/or/url', (err, arg) ->\n```\nOR\n\nThe `options` object would be the arguments passed to transmission.\nIf you want to set the download directory of the torrent you would pass in `\"download-dir\":\"/my/path\"`\n\n```coffee\ntransmission.add 'path/or/url', options, (err, arg) ->\n```\n\n### transmission.remove(ids, del, callback)\n\nRemove torrents.\n\nRemove also local data when `del` is `true`.\n\n```coffee\ntransmission.remove [1, 7], true, (err, arg) ->\n```\n\n### transmission.active(callback)\n\nList of active torrents. Callback is not needed and will fire the `active` event.\n\n```coffee\ntransmission.active (err, arg) ->\n```\n\n### transmission.get([ids], callback)\n\nGet torrents info that optional `ids`.\n\nIf omit `ids`, get all torrents.\n\n```coffee\n# Get torrents with id #1 and #7\ntransmission.get [1, 7], (err, arg) ->\n  if err\n    console.error err\n  else\n    for torrent in arg.torrents\n      console.log arg.torrents\n\n# Get all torrents and remove it if status is stopped.\ntransmission.get (err, arg) ->\n  if err\n    console.error err\n  else\n    for torrent in arg.torrents\n      if torrent.status is transmission.status.STOPPED\n        transmission.remove [torrent.id], (err) ->\n          console.error err if err\n```\n\n### transmission.stop(ids, callback)\n\nStop working torrents.\n\n```coffee\ntransmission.stop [1, 7], (err, arg) ->\n```\n\n### transmission.start(ids, callback)\n\nStart working torrents.\n\n```coffee\ntransmission.start [1, 7], (err, arg) ->\n```\n\n### transmission.startNow(ids, callback)\n\nBypass the download queue, start working torrents immediately.\n\n```coffee\ntransmission.startNow [1, 7], (err, arg) ->\n```\n\n### transmission.verify(ids, callback)\n\nVerify torrent data.\n\n```coffee\ntransmission.verify [1, 7], (err, arg) ->\n```\n\n### transmission.reannounce(ids, callback)\n\nReannounce to the tracker, ask for more peers.\n\n```coffee\ntransmission.reannounce [1, 7], (err, arg) ->\n```\n\n### transmission.session(callback)\n\nGet cleint session infomation.\n\n```coffee\ntransmission.session (err, arg) ->\n```\n\n### transmission.session({}, callback)\n\nSet session infomation.\n\n```coffee\ntransmission.session {'download-dir':'/my/path'}, (err, arg) ->\n```\n\n### transmission.sessionStats(callback)\n\nGet cleint session stats.\n\n```coffee\ntransmission.sessionStats (err, arg) ->\n```\n\n### All together.\n\n```js\nvvar Transmission = require('./')\n\nvar transmission = new Transmission({\n\tport : 9091,\n\thost : '127.0.0.1'\n})\n\nfunction getTorrent(id) {\n\ttransmission.get(id, function(err, result) {\n\t\tif (err) {\n\t\t\tthrow err\n\t\t}\n\t\tconsole.log('bt.get returned ' + result.torrents.length + ' torrents')\n\t\tresult.torrents.forEach(function(torrent) {\n\t\t\tconsole.log('hashString', torrent.hashString)\n\t\t})\n\t\tremoveTorrent(id)\n\t})\n}\n\nfunction removeTorrent(id) {\n\ttransmission.remove(id, function(err) {\n\t\tif (err) {\n\t\t\tthrow err\n\t\t}\n\t\tconsole.log('torrent was removed')\n\t})\n}\n\ntransmission.add('http://cdimage.debian.org/debian-cd/7.1.0/i386/bt-cd/debian-7.1.0-i386-netinst.iso.torrent', {\n\t\"download-dir\" : \"/home/torrents\"\n}, function(err, result) {\n\tif (err) {\n\t\treturn console.log(err)\n\t}\n\tvar id = result.id\n\tconsole.log('Just added a new torrent.')\n\tconsole.log('Torrent ID: ' + id)\n\tgetTorrent(id)\n})\n```\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/FLYBYME/node-transmission/issues"
  },
  "homepage": "https://github.com/FLYBYME/node-transmission",
  "_id": "transmission@0.3.4",
  "dist": {
    "shasum": "8527b1a50c29e32b9f3892526a798dc002aabe29"
  },
  "_from": "transmission@",
  "_resolved": "https://registry.npmjs.org/transmission/-/transmission-0.3.4.tgz"
}
